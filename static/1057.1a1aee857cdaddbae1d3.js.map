{"version":3,"file":"1057.1a1aee857cdaddbae1d3.js?v=1a1aee857cdaddbae1d3","mappings":"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","sources":["webpack://@jupyterlab/application-top/./node_modules/lib0/array.js","webpack://@jupyterlab/application-top/./node_modules/lib0/function.js","webpack://@jupyterlab/application-top/./node_modules/lib0/math.js","webpack://@jupyterlab/application-top/./node_modules/lib0/object.js","webpack://@jupyterlab/application-top/./node_modules/y-protocols/awareness.js"],"sourcesContent":["/**\n * Utility module to work with Arrays.\n *\n * @module array\n */\n\n/**\n * Return the last element of an array. The element must exist\n *\n * @template L\n * @param {Array<L>} arr\n * @return {L}\n */\nexport const last = arr => arr[arr.length - 1]\n\n/**\n * @template C\n * @return {Array<C>}\n */\nexport const create = () => /** @type {Array<C>} */ ([])\n\n/**\n * @template D\n * @param {Array<D>} a\n * @return {Array<D>}\n */\nexport const copy = a => /** @type {Array<D>} */ (a.slice())\n\n/**\n * Append elements from src to dest\n *\n * @template M\n * @param {Array<M>} dest\n * @param {Array<M>} src\n */\nexport const appendTo = (dest, src) => {\n  for (let i = 0; i < src.length; i++) {\n    dest.push(src[i])\n  }\n}\n\n/**\n * Transforms something array-like to an actual Array.\n *\n * @function\n * @template T\n * @param {ArrayLike<T>|Iterable<T>} arraylike\n * @return {T}\n */\nexport const from = Array.from\n\n/**\n * True iff condition holds on every element in the Array.\n *\n * @function\n * @template ITEM\n *\n * @param {Array<ITEM>} arr\n * @param {function(ITEM, number, Array<ITEM>):boolean} f\n * @return {boolean}\n */\nexport const every = (arr, f) => arr.every(f)\n\n/**\n * True iff condition holds on some element in the Array.\n *\n * @function\n * @template S\n * @param {Array<S>} arr\n * @param {function(S, number, Array<S>):boolean} f\n * @return {boolean}\n */\nexport const some = (arr, f) => arr.some(f)\n\n/**\n * @template ELEM\n *\n * @param {Array<ELEM>} a\n * @param {Array<ELEM>} b\n * @return {boolean}\n */\nexport const equalFlat = (a, b) => a.length === b.length && every(a, (item, index) => item === b[index])\n\n/**\n * @template ELEM\n * @param {Array<Array<ELEM>>} arr\n * @return {Array<ELEM>}\n */\nexport const flatten = arr => arr.reduce((acc, val) => acc.concat(val), [])\n","/**\n * Common functions and function call helpers.\n *\n * @module function\n */\n\nimport * as array from './array.js'\nimport * as object from './object.js'\n\n/**\n * Calls all functions in `fs` with args. Only throws after all functions were called.\n *\n * @param {Array<function>} fs\n * @param {Array<any>} args\n */\nexport const callAll = (fs, args, i = 0) => {\n  try {\n    for (; i < fs.length; i++) {\n      fs[i](...args)\n    }\n  } finally {\n    if (i < fs.length) {\n      callAll(fs, args, i + 1)\n    }\n  }\n}\n\nexport const nop = () => {}\n\n/**\n * @template T\n * @param {function():T} f\n * @return {T}\n */\nexport const apply = f => f()\n\n/**\n * @template A\n *\n * @param {A} a\n * @return {A}\n */\nexport const id = a => a\n\n/**\n * @template T\n *\n * @param {T} a\n * @param {T} b\n * @return {boolean}\n */\nexport const equalityStrict = (a, b) => a === b\n\n/**\n * @template T\n *\n * @param {Array<T>|object} a\n * @param {Array<T>|object} b\n * @return {boolean}\n */\nexport const equalityFlat = (a, b) => a === b || (a != null && b != null && a.constructor === b.constructor && ((a instanceof Array && array.equalFlat(a, /** @type {Array<T>} */ (b))) || (typeof a === 'object' && object.equalFlat(a, b))))\n\n/**\n * @param {any} a\n * @param {any} b\n * @return {boolean}\n */\nexport const equalityDeep = (a, b) => {\n  if (a == null || b == null) {\n    return equalityStrict(a, b)\n  }\n  if (a.constructor !== b.constructor) {\n    return false\n  }\n  if (a === b) {\n    return true\n  }\n  switch (a.constructor) {\n    case ArrayBuffer:\n      a = new Uint8Array(a)\n      b = new Uint8Array(b)\n    // eslint-disable-next-line no-fallthrough\n    case Uint8Array: {\n      if (a.byteLength !== b.byteLength) {\n        return false\n      }\n      for (let i = 0; i < a.length; i++) {\n        if (a[i] !== b[i]) {\n          return false\n        }\n      }\n      break\n    }\n    case Set: {\n      if (a.size !== b.size) {\n        return false\n      }\n      for (const value of a) {\n        if (!b.has(value)) {\n          return false\n        }\n      }\n      break\n    }\n    case Map: {\n      if (a.size !== b.size) {\n        return false\n      }\n      for (const key of a.keys()) {\n        if (!b.has(key) || !equalityDeep(a.get(key), b.get(key))) {\n          return false\n        }\n      }\n      break\n    }\n    case Object:\n      if (object.length(a) !== object.length(b)) {\n        return false\n      }\n      for (const key in a) {\n        if (!object.hasProperty(a, key) || !equalityDeep(a[key], b[key])) {\n          return false\n        }\n      }\n      break\n    case Array:\n      if (a.length !== b.length) {\n        return false\n      }\n      for (let i = 0; i < a.length; i++) {\n        if (!equalityDeep(a[i], b[i])) {\n          return false\n        }\n      }\n      break\n    default:\n      return false\n  }\n  return true\n}\n","/**\n * Common Math expressions.\n *\n * @module math\n */\n\nexport const floor = Math.floor\nexport const ceil = Math.ceil\nexport const abs = Math.abs\nexport const imul = Math.imul\nexport const round = Math.round\nexport const log10 = Math.log10\nexport const log2 = Math.log2\nexport const log = Math.log\nexport const sqrt = Math.sqrt\n\n/**\n * @function\n * @param {number} a\n * @param {number} b\n * @return {number} The sum of a and b\n */\nexport const add = (a, b) => a + b\n\n/**\n * @function\n * @param {number} a\n * @param {number} b\n * @return {number} The smaller element of a and b\n */\nexport const min = (a, b) => a < b ? a : b\n\n/**\n * @function\n * @param {number} a\n * @param {number} b\n * @return {number} The bigger element of a and b\n */\nexport const max = (a, b) => a > b ? a : b\n\nexport const isNaN = Number.isNaN\n\nexport const pow = Math.pow\n/**\n * Base 10 exponential function. Returns the value of 10 raised to the power of pow.\n *\n * @param {number} exp\n * @return {number}\n */\nexport const exp10 = exp => Math.pow(10, exp)\n\nexport const sign = Math.sign\n\n/**\n * @param {number} n\n * @return {boolean} Wether n is negative. This function also differentiates between -0 and +0\n */\nexport const isNegativeZero = n => n !== 0 ? n < 0 : 1 / n < 0\n","/**\n * Utility functions for working with EcmaScript objects.\n *\n * @module object\n */\n\n/**\n * @return {Object<string,any>} obj\n */\nexport const create = () => Object.create(null)\n\n/**\n * Object.assign\n */\nexport const assign = Object.assign\n\n/**\n * @param {Object<string,any>} obj\n */\nexport const keys = Object.keys\n\n/**\n * @param {Object<string,any>} obj\n * @param {function(any,string):any} f\n */\nexport const forEach = (obj, f) => {\n  for (const key in obj) {\n    f(obj[key], key)\n  }\n}\n\n/**\n * @template R\n * @param {Object<string,any>} obj\n * @param {function(any,string):R} f\n * @return {Array<R>}\n */\nexport const map = (obj, f) => {\n  const results = []\n  for (const key in obj) {\n    results.push(f(obj[key], key))\n  }\n  return results\n}\n\n/**\n * @param {Object<string,any>} obj\n * @return {number}\n */\nexport const length = obj => keys(obj).length\n\n/**\n * @param {Object<string,any>} obj\n * @param {function(any,string):boolean} f\n * @return {boolean}\n */\nexport const some = (obj, f) => {\n  for (const key in obj) {\n    if (f(obj[key], key)) {\n      return true\n    }\n  }\n  return false\n}\n\n/**\n * @param {Object<string,any>} obj\n * @param {function(any,string):boolean} f\n * @return {boolean}\n */\nexport const every = (obj, f) => {\n  for (const key in obj) {\n    if (!f(obj[key], key)) {\n      return false\n    }\n  }\n  return true\n}\n\n/**\n * Calls `Object.prototype.hasOwnProperty`.\n *\n * @param {any} obj\n * @param {string|symbol} key\n * @return {boolean}\n */\nexport const hasProperty = (obj, key) => Object.prototype.hasOwnProperty.call(obj, key)\n\n/**\n * @param {Object<string,any>} a\n * @param {Object<string,any>} b\n * @return {boolean}\n */\nexport const equalFlat = (a, b) => a === b || (length(a) === length(b) && every(a, (val, key) => (val !== undefined || hasProperty(b, key)) && b[key] === val))\n","/**\n * @module awareness-protocol\n */\n\nimport * as encoding from 'lib0/encoding'\nimport * as decoding from 'lib0/decoding'\nimport * as time from 'lib0/time'\nimport * as math from 'lib0/math'\nimport { Observable } from 'lib0/observable'\nimport * as f from 'lib0/function'\nimport * as Y from 'yjs' // eslint-disable-line\n\nexport const outdatedTimeout = 30000\n\n/**\n * @typedef {Object} MetaClientState\n * @property {number} MetaClientState.clock\n * @property {number} MetaClientState.lastUpdated unix timestamp\n */\n\n/**\n * The Awareness class implements a simple shared state protocol that can be used for non-persistent data like awareness information\n * (cursor, username, status, ..). Each client can update its own local state and listen to state changes of\n * remote clients. Every client may set a state of a remote peer to `null` to mark the client as offline.\n *\n * Each client is identified by a unique client id (something we borrow from `doc.clientID`). A client can override\n * its own state by propagating a message with an increasing timestamp (`clock`). If such a message is received, it is\n * applied if the known state of that client is older than the new state (`clock < newClock`). If a client thinks that\n * a remote client is offline, it may propagate a message with\n * `{ clock: currentClientClock, state: null, client: remoteClient }`. If such a\n * message is received, and the known clock of that client equals the received clock, it will override the state with `null`.\n *\n * Before a client disconnects, it should propagate a `null` state with an updated clock.\n *\n * Awareness states must be updated every 30 seconds. Otherwise the Awareness instance will delete the client state.\n *\n * @extends {Observable<string>}\n */\nexport class Awareness extends Observable {\n  /**\n   * @param {Y.Doc} doc\n   */\n  constructor (doc) {\n    super()\n    this.doc = doc\n    /**\n     * @type {number}\n     */\n    this.clientID = doc.clientID\n    /**\n     * Maps from client id to client state\n     * @type {Map<number, Object<string, any>>}\n     */\n    this.states = new Map()\n    /**\n     * @type {Map<number, MetaClientState>}\n     */\n    this.meta = new Map()\n    this._checkInterval = /** @type {any} */ (setInterval(() => {\n      const now = time.getUnixTime()\n      if (this.getLocalState() !== null && (outdatedTimeout / 2 <= now - /** @type {{lastUpdated:number}} */ (this.meta.get(this.clientID)).lastUpdated)) {\n        // renew local clock\n        this.setLocalState(this.getLocalState())\n      }\n      /**\n       * @type {Array<number>}\n       */\n      const remove = []\n      this.meta.forEach((meta, clientid) => {\n        if (clientid !== this.clientID && outdatedTimeout <= now - meta.lastUpdated && this.states.has(clientid)) {\n          remove.push(clientid)\n        }\n      })\n      if (remove.length > 0) {\n        removeAwarenessStates(this, remove, 'timeout')\n      }\n    }, math.floor(outdatedTimeout / 10)))\n    doc.on('destroy', () => {\n      this.destroy()\n    })\n    this.setLocalState({})\n  }\n\n  destroy () {\n    this.emit('destroy', [this])\n    this.setLocalState(null)\n    super.destroy()\n    clearInterval(this._checkInterval)\n  }\n\n  /**\n   * @return {Object<string,any>|null}\n   */\n  getLocalState () {\n    return this.states.get(this.clientID) || null\n  }\n\n  /**\n   * @param {Object<string,any>|null} state\n   */\n  setLocalState (state) {\n    const clientID = this.clientID\n    const currLocalMeta = this.meta.get(clientID)\n    const clock = currLocalMeta === undefined ? 0 : currLocalMeta.clock + 1\n    const prevState = this.states.get(clientID)\n    if (state === null) {\n      this.states.delete(clientID)\n    } else {\n      this.states.set(clientID, state)\n    }\n    this.meta.set(clientID, {\n      clock,\n      lastUpdated: time.getUnixTime()\n    })\n    const added = []\n    const updated = []\n    const filteredUpdated = []\n    const removed = []\n    if (state === null) {\n      removed.push(clientID)\n    } else if (prevState == null) {\n      if (state != null) {\n        added.push(clientID)\n      }\n    } else {\n      updated.push(clientID)\n      if (!f.equalityDeep(prevState, state)) {\n        filteredUpdated.push(clientID)\n      }\n    }\n    if (added.length > 0 || filteredUpdated.length > 0 || removed.length > 0) {\n      this.emit('change', [{ added, updated: filteredUpdated, removed }, 'local'])\n    }\n    this.emit('update', [{ added, updated, removed }, 'local'])\n  }\n\n  /**\n   * @param {string} field\n   * @param {any} value\n   */\n  setLocalStateField (field, value) {\n    const state = this.getLocalState()\n    if (state !== null) {\n      this.setLocalState({\n        ...state,\n        [field]: value\n      })\n    }\n  }\n\n  /**\n   * @return {Map<number,Object<string,any>>}\n   */\n  getStates () {\n    return this.states\n  }\n}\n\n/**\n * Mark (remote) clients as inactive and remove them from the list of active peers.\n * This change will be propagated to remote clients.\n *\n * @param {Awareness} awareness\n * @param {Array<number>} clients\n * @param {any} origin\n */\nexport const removeAwarenessStates = (awareness, clients, origin) => {\n  const removed = []\n  for (let i = 0; i < clients.length; i++) {\n    const clientID = clients[i]\n    if (awareness.states.has(clientID)) {\n      awareness.states.delete(clientID)\n      if (clientID === awareness.clientID) {\n        const curMeta = /** @type {MetaClientState} */ (awareness.meta.get(clientID))\n        awareness.meta.set(clientID, {\n          clock: curMeta.clock + 1,\n          lastUpdated: time.getUnixTime()\n        })\n      }\n      removed.push(clientID)\n    }\n  }\n  if (removed.length > 0) {\n    awareness.emit('change', [{ added: [], updated: [], removed }, origin])\n    awareness.emit('update', [{ added: [], updated: [], removed }, origin])\n  }\n}\n\n/**\n * @param {Awareness} awareness\n * @param {Array<number>} clients\n * @return {Uint8Array}\n */\nexport const encodeAwarenessUpdate = (awareness, clients, states = awareness.states) => {\n  const len = clients.length\n  const encoder = encoding.createEncoder()\n  encoding.writeVarUint(encoder, len)\n  for (let i = 0; i < len; i++) {\n    const clientID = clients[i]\n    const state = states.get(clientID) || null\n    const clock = /** @type {MetaClientState} */ (awareness.meta.get(clientID)).clock\n    encoding.writeVarUint(encoder, clientID)\n    encoding.writeVarUint(encoder, clock)\n    encoding.writeVarString(encoder, JSON.stringify(state))\n  }\n  return encoding.toUint8Array(encoder)\n}\n\n/**\n * Modify the content of an awareness update before re-encoding it to an awareness update.\n *\n * This might be useful when you have a central server that wants to ensure that clients\n * cant hijack somebody elses identity.\n *\n * @param {Uint8Array} update\n * @param {function(any):any} modify\n * @return {Uint8Array}\n */\nexport const modifyAwarenessUpdate = (update, modify) => {\n  const decoder = decoding.createDecoder(update)\n  const encoder = encoding.createEncoder()\n  const len = decoding.readVarUint(decoder)\n  encoding.writeVarUint(encoder, len)\n  for (let i = 0; i < len; i++) {\n    const clientID = decoding.readVarUint(decoder)\n    const clock = decoding.readVarUint(decoder)\n    const state = JSON.parse(decoding.readVarString(decoder))\n    const modifiedState = modify(state)\n    encoding.writeVarUint(encoder, clientID)\n    encoding.writeVarUint(encoder, clock)\n    encoding.writeVarString(encoder, JSON.stringify(modifiedState))\n  }\n  return encoding.toUint8Array(encoder)\n}\n\n/**\n * @param {Awareness} awareness\n * @param {Uint8Array} update\n * @param {any} origin This will be added to the emitted change event\n */\nexport const applyAwarenessUpdate = (awareness, update, origin) => {\n  const decoder = decoding.createDecoder(update)\n  const timestamp = time.getUnixTime()\n  const added = []\n  const updated = []\n  const filteredUpdated = []\n  const removed = []\n  const len = decoding.readVarUint(decoder)\n  for (let i = 0; i < len; i++) {\n    const clientID = decoding.readVarUint(decoder)\n    let clock = decoding.readVarUint(decoder)\n    const state = JSON.parse(decoding.readVarString(decoder))\n    const clientMeta = awareness.meta.get(clientID)\n    const prevState = awareness.states.get(clientID)\n    const currClock = clientMeta === undefined ? 0 : clientMeta.clock\n    if (currClock < clock || (currClock === clock && state === null && awareness.states.has(clientID))) {\n      if (state === null) {\n        // never let a remote client remove this local state\n        if (clientID === awareness.clientID && awareness.getLocalState() != null) {\n          // remote client removed the local state. Do not remote state. Broadcast a message indicating\n          // that this client still exists by increasing the clock\n          clock++\n        } else {\n          awareness.states.delete(clientID)\n        }\n      } else {\n        awareness.states.set(clientID, state)\n      }\n      awareness.meta.set(clientID, {\n        clock,\n        lastUpdated: timestamp\n      })\n      if (clientMeta === undefined && state !== null) {\n        added.push(clientID)\n      } else if (clientMeta !== undefined && state === null) {\n        removed.push(clientID)\n      } else if (state !== null) {\n        if (!f.equalityDeep(state, prevState)) {\n          filteredUpdated.push(clientID)\n        }\n        updated.push(clientID)\n      }\n    }\n  }\n  if (added.length > 0 || filteredUpdated.length > 0 || removed.length > 0) {\n    awareness.emit('change', [{\n      added, updated: filteredUpdated, removed\n    }, origin])\n  }\n  if (added.length > 0 || updated.length > 0 || removed.length > 0) {\n    awareness.emit('update', [{\n      added, updated, removed\n    }, origin])\n  }\n}\n"],"names":["last","arr","length","create","copy","a","slice","appendTo","dest","src","i","push","from","Array","every","f","some","equalFlat","b","item","index","flatten","reduce","acc","val","concat","callAll","fs","args","nop","apply","id","equalityStrict","equalityFlat","constructor","equalityDeep","ArrayBuffer","Uint8Array","byteLength","Set","size","value","has","Map","key","keys","get","Object","floor","Math","ceil","abs","imul","round","log10","log2","log","sqrt","add","min","max","isNaN","Number","pow","exp10","exp","sign","isNegativeZero","n","assign","forEach","obj","map","results","hasProperty","prototype","hasOwnProperty","call","undefined","outdatedTimeout","Awareness","doc","super","this","clientID","states","meta","_checkInterval","setInterval","now","getLocalState","lastUpdated","setLocalState","remove","clientid","removeAwarenessStates","on","destroy","emit","clearInterval","state","currLocalMeta","clock","prevState","delete","set","added","updated","filteredUpdated","removed","setLocalStateField","field","getStates","awareness","clients","origin","curMeta","encodeAwarenessUpdate","len","encoder","JSON","stringify","modifyAwarenessUpdate","update","modify","decoder","decoding","createDecoder","encoding","createEncoder","readVarUint","writeVarUint","parse","readVarString","modifiedState","writeVarString","toUint8Array","applyAwarenessUpdate","timestamp","clientMeta","currClock"],"sourceRoot":""}