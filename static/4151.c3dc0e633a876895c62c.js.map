{"version":3,"file":"4151.c3dc0e633a876895c62c.js?v=c3dc0e633a876895c62c","mappings":"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","sources":["webpack://@jupyterlab/application-top/./node_modules/lib0/array.js","webpack://@jupyterlab/application-top/./node_modules/lib0/function.js","webpack://@jupyterlab/application-top/./node_modules/lib0/math.js","webpack://@jupyterlab/application-top/./node_modules/lib0/mutex.js","webpack://@jupyterlab/application-top/./node_modules/lib0/object.js","webpack://@jupyterlab/application-top/./node_modules/y-protocols/awareness.js","webpack://@jupyterlab/application-top/./node_modules/lib0/broadcastchannel.js","webpack://@jupyterlab/application-top/./node_modules/y-protocols/sync.js","webpack://@jupyterlab/application-top/./node_modules/y-protocols/auth.js","webpack://@jupyterlab/application-top/./node_modules/lib0/url.js","webpack://@jupyterlab/application-top/./node_modules/y-websocket/src/y-websocket.js"],"sourcesContent":["/**\n * Utility module to work with Arrays.\n *\n * @module array\n */\n\n/**\n * Return the last element of an array. The element must exist\n *\n * @template L\n * @param {Array<L>} arr\n * @return {L}\n */\nexport const last = arr => arr[arr.length - 1]\n\n/**\n * @template C\n * @return {Array<C>}\n */\nexport const create = () => /** @type {Array<C>} */ ([])\n\n/**\n * @template D\n * @param {Array<D>} a\n * @return {Array<D>}\n */\nexport const copy = a => /** @type {Array<D>} */ (a.slice())\n\n/**\n * Append elements from src to dest\n *\n * @template M\n * @param {Array<M>} dest\n * @param {Array<M>} src\n */\nexport const appendTo = (dest, src) => {\n  for (let i = 0; i < src.length; i++) {\n    dest.push(src[i])\n  }\n}\n\n/**\n * Transforms something array-like to an actual Array.\n *\n * @function\n * @template T\n * @param {ArrayLike<T>|Iterable<T>} arraylike\n * @return {T}\n */\nexport const from = Array.from\n\n/**\n * True iff condition holds on every element in the Array.\n *\n * @function\n * @template ITEM\n *\n * @param {Array<ITEM>} arr\n * @param {function(ITEM, number, Array<ITEM>):boolean} f\n * @return {boolean}\n */\nexport const every = (arr, f) => arr.every(f)\n\n/**\n * True iff condition holds on some element in the Array.\n *\n * @function\n * @template S\n * @param {Array<S>} arr\n * @param {function(S, number, Array<S>):boolean} f\n * @return {boolean}\n */\nexport const some = (arr, f) => arr.some(f)\n\n/**\n * @template ELEM\n *\n * @param {Array<ELEM>} a\n * @param {Array<ELEM>} b\n * @return {boolean}\n */\nexport const equalFlat = (a, b) => a.length === b.length && every(a, (item, index) => item === b[index])\n\n/**\n * @template ELEM\n * @param {Array<Array<ELEM>>} arr\n * @return {Array<ELEM>}\n */\nexport const flatten = arr => arr.reduce((acc, val) => acc.concat(val), [])\n","/**\n * Common functions and function call helpers.\n *\n * @module function\n */\n\nimport * as array from './array.js'\nimport * as object from './object.js'\n\n/**\n * Calls all functions in `fs` with args. Only throws after all functions were called.\n *\n * @param {Array<function>} fs\n * @param {Array<any>} args\n */\nexport const callAll = (fs, args, i = 0) => {\n  try {\n    for (; i < fs.length; i++) {\n      fs[i](...args)\n    }\n  } finally {\n    if (i < fs.length) {\n      callAll(fs, args, i + 1)\n    }\n  }\n}\n\nexport const nop = () => {}\n\n/**\n * @template T\n * @param {function():T} f\n * @return {T}\n */\nexport const apply = f => f()\n\n/**\n * @template A\n *\n * @param {A} a\n * @return {A}\n */\nexport const id = a => a\n\n/**\n * @template T\n *\n * @param {T} a\n * @param {T} b\n * @return {boolean}\n */\nexport const equalityStrict = (a, b) => a === b\n\n/**\n * @template T\n *\n * @param {Array<T>|object} a\n * @param {Array<T>|object} b\n * @return {boolean}\n */\nexport const equalityFlat = (a, b) => a === b || (a != null && b != null && a.constructor === b.constructor && ((a instanceof Array && array.equalFlat(a, /** @type {Array<T>} */ (b))) || (typeof a === 'object' && object.equalFlat(a, b))))\n\n/**\n * @param {any} a\n * @param {any} b\n * @return {boolean}\n */\nexport const equalityDeep = (a, b) => {\n  if (a == null || b == null) {\n    return equalityStrict(a, b)\n  }\n  if (a.constructor !== b.constructor) {\n    return false\n  }\n  if (a === b) {\n    return true\n  }\n  switch (a.constructor) {\n    case ArrayBuffer:\n      a = new Uint8Array(a)\n      b = new Uint8Array(b)\n    // eslint-disable-next-line no-fallthrough\n    case Uint8Array: {\n      if (a.byteLength !== b.byteLength) {\n        return false\n      }\n      for (let i = 0; i < a.length; i++) {\n        if (a[i] !== b[i]) {\n          return false\n        }\n      }\n      break\n    }\n    case Set: {\n      if (a.size !== b.size) {\n        return false\n      }\n      for (const value of a) {\n        if (!b.has(value)) {\n          return false\n        }\n      }\n      break\n    }\n    case Map: {\n      if (a.size !== b.size) {\n        return false\n      }\n      for (const key of a.keys()) {\n        if (!b.has(key) || !equalityDeep(a.get(key), b.get(key))) {\n          return false\n        }\n      }\n      break\n    }\n    case Object:\n      if (object.length(a) !== object.length(b)) {\n        return false\n      }\n      for (const key in a) {\n        if (!object.hasProperty(a, key) || !equalityDeep(a[key], b[key])) {\n          return false\n        }\n      }\n      break\n    case Array:\n      if (a.length !== b.length) {\n        return false\n      }\n      for (let i = 0; i < a.length; i++) {\n        if (!equalityDeep(a[i], b[i])) {\n          return false\n        }\n      }\n      break\n    default:\n      return false\n  }\n  return true\n}\n","/**\n * Common Math expressions.\n *\n * @module math\n */\n\nexport const floor = Math.floor\nexport const ceil = Math.ceil\nexport const abs = Math.abs\nexport const imul = Math.imul\nexport const round = Math.round\nexport const log10 = Math.log10\nexport const log2 = Math.log2\nexport const log = Math.log\nexport const sqrt = Math.sqrt\n\n/**\n * @function\n * @param {number} a\n * @param {number} b\n * @return {number} The sum of a and b\n */\nexport const add = (a, b) => a + b\n\n/**\n * @function\n * @param {number} a\n * @param {number} b\n * @return {number} The smaller element of a and b\n */\nexport const min = (a, b) => a < b ? a : b\n\n/**\n * @function\n * @param {number} a\n * @param {number} b\n * @return {number} The bigger element of a and b\n */\nexport const max = (a, b) => a > b ? a : b\n\nexport const isNaN = Number.isNaN\n\nexport const pow = Math.pow\n/**\n * Base 10 exponential function. Returns the value of 10 raised to the power of pow.\n *\n * @param {number} exp\n * @return {number}\n */\nexport const exp10 = exp => Math.pow(10, exp)\n\nexport const sign = Math.sign\n\n/**\n * @param {number} n\n * @return {boolean} Wether n is negative. This function also differentiates between -0 and +0\n */\nexport const isNegativeZero = n => n !== 0 ? n < 0 : 1 / n < 0\n","/**\n * Mutual exclude for JavaScript.\n *\n * @module mutex\n */\n\n/**\n * @callback mutex\n * @param {function():void} cb Only executed when this mutex is not in the current stack\n * @param {function():void} [elseCb] Executed when this mutex is in the current stack\n */\n\n/**\n * Creates a mutual exclude function with the following property:\n *\n * ```js\n * const mutex = createMutex()\n * mutex(() => {\n *   // This function is immediately executed\n *   mutex(() => {\n *     // This function is not executed, as the mutex is already active.\n *   })\n * })\n * ```\n *\n * @return {mutex} A mutual exclude function\n * @public\n */\nexport const createMutex = () => {\n  let token = true\n  return (f, g) => {\n    if (token) {\n      token = false\n      try {\n        f()\n      } finally {\n        token = true\n      }\n    } else if (g !== undefined) {\n      g()\n    }\n  }\n}\n","/**\n * Utility functions for working with EcmaScript objects.\n *\n * @module object\n */\n\n/**\n * @return {Object<string,any>} obj\n */\nexport const create = () => Object.create(null)\n\n/**\n * Object.assign\n */\nexport const assign = Object.assign\n\n/**\n * @param {Object<string,any>} obj\n */\nexport const keys = Object.keys\n\n/**\n * @param {Object<string,any>} obj\n * @param {function(any,string):any} f\n */\nexport const forEach = (obj, f) => {\n  for (const key in obj) {\n    f(obj[key], key)\n  }\n}\n\n/**\n * @template R\n * @param {Object<string,any>} obj\n * @param {function(any,string):R} f\n * @return {Array<R>}\n */\nexport const map = (obj, f) => {\n  const results = []\n  for (const key in obj) {\n    results.push(f(obj[key], key))\n  }\n  return results\n}\n\n/**\n * @param {Object<string,any>} obj\n * @return {number}\n */\nexport const length = obj => keys(obj).length\n\n/**\n * @param {Object<string,any>} obj\n * @param {function(any,string):boolean} f\n * @return {boolean}\n */\nexport const some = (obj, f) => {\n  for (const key in obj) {\n    if (f(obj[key], key)) {\n      return true\n    }\n  }\n  return false\n}\n\n/**\n * @param {Object<string,any>} obj\n * @param {function(any,string):boolean} f\n * @return {boolean}\n */\nexport const every = (obj, f) => {\n  for (const key in obj) {\n    if (!f(obj[key], key)) {\n      return false\n    }\n  }\n  return true\n}\n\n/**\n * Calls `Object.prototype.hasOwnProperty`.\n *\n * @param {any} obj\n * @param {string|symbol} key\n * @return {boolean}\n */\nexport const hasProperty = (obj, key) => Object.prototype.hasOwnProperty.call(obj, key)\n\n/**\n * @param {Object<string,any>} a\n * @param {Object<string,any>} b\n * @return {boolean}\n */\nexport const equalFlat = (a, b) => a === b || (length(a) === length(b) && every(a, (val, key) => (val !== undefined || hasProperty(b, key)) && b[key] === val))\n","/**\n * @module awareness-protocol\n */\n\nimport * as encoding from 'lib0/encoding'\nimport * as decoding from 'lib0/decoding'\nimport * as time from 'lib0/time'\nimport * as math from 'lib0/math'\nimport { Observable } from 'lib0/observable'\nimport * as f from 'lib0/function'\nimport * as Y from 'yjs' // eslint-disable-line\n\nexport const outdatedTimeout = 30000\n\n/**\n * @typedef {Object} MetaClientState\n * @property {number} MetaClientState.clock\n * @property {number} MetaClientState.lastUpdated unix timestamp\n */\n\n/**\n * The Awareness class implements a simple shared state protocol that can be used for non-persistent data like awareness information\n * (cursor, username, status, ..). Each client can update its own local state and listen to state changes of\n * remote clients. Every client may set a state of a remote peer to `null` to mark the client as offline.\n *\n * Each client is identified by a unique client id (something we borrow from `doc.clientID`). A client can override\n * its own state by propagating a message with an increasing timestamp (`clock`). If such a message is received, it is\n * applied if the known state of that client is older than the new state (`clock < newClock`). If a client thinks that\n * a remote client is offline, it may propagate a message with\n * `{ clock: currentClientClock, state: null, client: remoteClient }`. If such a\n * message is received, and the known clock of that client equals the received clock, it will override the state with `null`.\n *\n * Before a client disconnects, it should propagate a `null` state with an updated clock.\n *\n * Awareness states must be updated every 30 seconds. Otherwise the Awareness instance will delete the client state.\n *\n * @extends {Observable<string>}\n */\nexport class Awareness extends Observable {\n  /**\n   * @param {Y.Doc} doc\n   */\n  constructor (doc) {\n    super()\n    this.doc = doc\n    /**\n     * @type {number}\n     */\n    this.clientID = doc.clientID\n    /**\n     * Maps from client id to client state\n     * @type {Map<number, Object<string, any>>}\n     */\n    this.states = new Map()\n    /**\n     * @type {Map<number, MetaClientState>}\n     */\n    this.meta = new Map()\n    this._checkInterval = /** @type {any} */ (setInterval(() => {\n      const now = time.getUnixTime()\n      if (this.getLocalState() !== null && (outdatedTimeout / 2 <= now - /** @type {{lastUpdated:number}} */ (this.meta.get(this.clientID)).lastUpdated)) {\n        // renew local clock\n        this.setLocalState(this.getLocalState())\n      }\n      /**\n       * @type {Array<number>}\n       */\n      const remove = []\n      this.meta.forEach((meta, clientid) => {\n        if (clientid !== this.clientID && outdatedTimeout <= now - meta.lastUpdated && this.states.has(clientid)) {\n          remove.push(clientid)\n        }\n      })\n      if (remove.length > 0) {\n        removeAwarenessStates(this, remove, 'timeout')\n      }\n    }, math.floor(outdatedTimeout / 10)))\n    doc.on('destroy', () => {\n      this.destroy()\n    })\n    this.setLocalState({})\n  }\n\n  destroy () {\n    this.emit('destroy', [this])\n    this.setLocalState(null)\n    super.destroy()\n    clearInterval(this._checkInterval)\n  }\n\n  /**\n   * @return {Object<string,any>|null}\n   */\n  getLocalState () {\n    return this.states.get(this.clientID) || null\n  }\n\n  /**\n   * @param {Object<string,any>|null} state\n   */\n  setLocalState (state) {\n    const clientID = this.clientID\n    const currLocalMeta = this.meta.get(clientID)\n    const clock = currLocalMeta === undefined ? 0 : currLocalMeta.clock + 1\n    const prevState = this.states.get(clientID)\n    if (state === null) {\n      this.states.delete(clientID)\n    } else {\n      this.states.set(clientID, state)\n    }\n    this.meta.set(clientID, {\n      clock,\n      lastUpdated: time.getUnixTime()\n    })\n    const added = []\n    const updated = []\n    const filteredUpdated = []\n    const removed = []\n    if (state === null) {\n      removed.push(clientID)\n    } else if (prevState == null) {\n      if (state != null) {\n        added.push(clientID)\n      }\n    } else {\n      updated.push(clientID)\n      if (!f.equalityDeep(prevState, state)) {\n        filteredUpdated.push(clientID)\n      }\n    }\n    if (added.length > 0 || filteredUpdated.length > 0 || removed.length > 0) {\n      this.emit('change', [{ added, updated: filteredUpdated, removed }, 'local'])\n    }\n    this.emit('update', [{ added, updated, removed }, 'local'])\n  }\n\n  /**\n   * @param {string} field\n   * @param {any} value\n   */\n  setLocalStateField (field, value) {\n    const state = this.getLocalState()\n    if (state !== null) {\n      this.setLocalState({\n        ...state,\n        [field]: value\n      })\n    }\n  }\n\n  /**\n   * @return {Map<number,Object<string,any>>}\n   */\n  getStates () {\n    return this.states\n  }\n}\n\n/**\n * Mark (remote) clients as inactive and remove them from the list of active peers.\n * This change will be propagated to remote clients.\n *\n * @param {Awareness} awareness\n * @param {Array<number>} clients\n * @param {any} origin\n */\nexport const removeAwarenessStates = (awareness, clients, origin) => {\n  const removed = []\n  for (let i = 0; i < clients.length; i++) {\n    const clientID = clients[i]\n    if (awareness.states.has(clientID)) {\n      awareness.states.delete(clientID)\n      if (clientID === awareness.clientID) {\n        const curMeta = /** @type {MetaClientState} */ (awareness.meta.get(clientID))\n        awareness.meta.set(clientID, {\n          clock: curMeta.clock + 1,\n          lastUpdated: time.getUnixTime()\n        })\n      }\n      removed.push(clientID)\n    }\n  }\n  if (removed.length > 0) {\n    awareness.emit('change', [{ added: [], updated: [], removed }, origin])\n    awareness.emit('update', [{ added: [], updated: [], removed }, origin])\n  }\n}\n\n/**\n * @param {Awareness} awareness\n * @param {Array<number>} clients\n * @return {Uint8Array}\n */\nexport const encodeAwarenessUpdate = (awareness, clients, states = awareness.states) => {\n  const len = clients.length\n  const encoder = encoding.createEncoder()\n  encoding.writeVarUint(encoder, len)\n  for (let i = 0; i < len; i++) {\n    const clientID = clients[i]\n    const state = states.get(clientID) || null\n    const clock = /** @type {MetaClientState} */ (awareness.meta.get(clientID)).clock\n    encoding.writeVarUint(encoder, clientID)\n    encoding.writeVarUint(encoder, clock)\n    encoding.writeVarString(encoder, JSON.stringify(state))\n  }\n  return encoding.toUint8Array(encoder)\n}\n\n/**\n * Modify the content of an awareness update before re-encoding it to an awareness update.\n *\n * This might be useful when you have a central server that wants to ensure that clients\n * cant hijack somebody elses identity.\n *\n * @param {Uint8Array} update\n * @param {function(any):any} modify\n * @return {Uint8Array}\n */\nexport const modifyAwarenessUpdate = (update, modify) => {\n  const decoder = decoding.createDecoder(update)\n  const encoder = encoding.createEncoder()\n  const len = decoding.readVarUint(decoder)\n  encoding.writeVarUint(encoder, len)\n  for (let i = 0; i < len; i++) {\n    const clientID = decoding.readVarUint(decoder)\n    const clock = decoding.readVarUint(decoder)\n    const state = JSON.parse(decoding.readVarString(decoder))\n    const modifiedState = modify(state)\n    encoding.writeVarUint(encoder, clientID)\n    encoding.writeVarUint(encoder, clock)\n    encoding.writeVarString(encoder, JSON.stringify(modifiedState))\n  }\n  return encoding.toUint8Array(encoder)\n}\n\n/**\n * @param {Awareness} awareness\n * @param {Uint8Array} update\n * @param {any} origin This will be added to the emitted change event\n */\nexport const applyAwarenessUpdate = (awareness, update, origin) => {\n  const decoder = decoding.createDecoder(update)\n  const timestamp = time.getUnixTime()\n  const added = []\n  const updated = []\n  const filteredUpdated = []\n  const removed = []\n  const len = decoding.readVarUint(decoder)\n  for (let i = 0; i < len; i++) {\n    const clientID = decoding.readVarUint(decoder)\n    let clock = decoding.readVarUint(decoder)\n    const state = JSON.parse(decoding.readVarString(decoder))\n    const clientMeta = awareness.meta.get(clientID)\n    const prevState = awareness.states.get(clientID)\n    const currClock = clientMeta === undefined ? 0 : clientMeta.clock\n    if (currClock < clock || (currClock === clock && state === null && awareness.states.has(clientID))) {\n      if (state === null) {\n        // never let a remote client remove this local state\n        if (clientID === awareness.clientID && awareness.getLocalState() != null) {\n          // remote client removed the local state. Do not remote state. Broadcast a message indicating\n          // that this client still exists by increasing the clock\n          clock++\n        } else {\n          awareness.states.delete(clientID)\n        }\n      } else {\n        awareness.states.set(clientID, state)\n      }\n      awareness.meta.set(clientID, {\n        clock,\n        lastUpdated: timestamp\n      })\n      if (clientMeta === undefined && state !== null) {\n        added.push(clientID)\n      } else if (clientMeta !== undefined && state === null) {\n        removed.push(clientID)\n      } else if (state !== null) {\n        if (!f.equalityDeep(state, prevState)) {\n          filteredUpdated.push(clientID)\n        }\n        updated.push(clientID)\n      }\n    }\n  }\n  if (added.length > 0 || filteredUpdated.length > 0 || removed.length > 0) {\n    awareness.emit('change', [{\n      added, updated: filteredUpdated, removed\n    }, origin])\n  }\n  if (added.length > 0 || updated.length > 0 || removed.length > 0) {\n    awareness.emit('update', [{\n      added, updated, removed\n    }, origin])\n  }\n}\n","/* eslint-env browser */\n\n/**\n * Helpers for cross-tab communication using broadcastchannel with LocalStorage fallback.\n *\n * ```js\n * // In browser window A:\n * broadcastchannel.subscribe('my events', data => console.log(data))\n * broadcastchannel.publish('my events', 'Hello world!') // => A: 'Hello world!' fires synchronously in same tab\n *\n * // In browser window B:\n * broadcastchannel.publish('my events', 'hello from tab B') // => A: 'hello from tab B'\n * ```\n *\n * @module broadcastchannel\n */\n\n// @todo before next major: use Uint8Array instead as buffer object\n\nimport * as map from './map.js'\nimport * as buffer from './buffer.js'\nimport * as storage from './storage.js'\n\n/**\n * @typedef {Object} Channel\n * @property {Set<Function>} Channel.subs\n * @property {any} Channel.bc\n */\n\n/**\n * @type {Map<string, Channel>}\n */\nconst channels = new Map()\n\nclass LocalStoragePolyfill {\n  /**\n   * @param {string} room\n   */\n  constructor (room) {\n    this.room = room\n    /**\n     * @type {null|function({data:ArrayBuffer}):void}\n     */\n    this.onmessage = null\n    storage.onChange(e => e.key === room && this.onmessage !== null && this.onmessage({ data: buffer.fromBase64(e.newValue || '') }))\n  }\n\n  /**\n   * @param {ArrayBuffer} buf\n   */\n  postMessage (buf) {\n    storage.varStorage.setItem(this.room, buffer.toBase64(buffer.createUint8ArrayFromArrayBuffer(buf)))\n  }\n}\n\n// Use BroadcastChannel or Polyfill\nconst BC = typeof BroadcastChannel === 'undefined' ? LocalStoragePolyfill : BroadcastChannel\n\n/**\n * @param {string} room\n * @return {Channel}\n */\nconst getChannel = room =>\n  map.setIfUndefined(channels, room, () => {\n    const subs = new Set()\n    const bc = new BC(room)\n    /**\n     * @param {{data:ArrayBuffer}} e\n     */\n    bc.onmessage = e => subs.forEach(sub => sub(e.data))\n    return {\n      bc, subs\n    }\n  })\n\n/**\n * Subscribe to global `publish` events.\n *\n * @function\n * @param {string} room\n * @param {function(any):any} f\n */\nexport const subscribe = (room, f) => getChannel(room).subs.add(f)\n\n/**\n * Unsubscribe from `publish` global events.\n *\n * @function\n * @param {string} room\n * @param {function(any):any} f\n */\nexport const unsubscribe = (room, f) => getChannel(room).subs.delete(f)\n\n/**\n * Publish data to all subscribers (including subscribers on this tab)\n *\n * @function\n * @param {string} room\n * @param {any} data\n */\nexport const publish = (room, data) => {\n  const c = getChannel(room)\n  c.bc.postMessage(data)\n  c.subs.forEach(sub => sub(data))\n}\n","/**\n * @module sync-protocol\n */\n\nimport * as encoding from 'lib0/encoding'\nimport * as decoding from 'lib0/decoding'\nimport * as Y from 'yjs'\n\n/**\n * @typedef {Map<number, number>} StateMap\n */\n\n/**\n * Core Yjs defines two message types:\n * • YjsSyncStep1: Includes the State Set of the sending client. When received, the client should reply with YjsSyncStep2.\n * • YjsSyncStep2: Includes all missing structs and the complete delete set. When received, the client is assured that it\n *   received all information from the remote client.\n *\n * In a peer-to-peer network, you may want to introduce a SyncDone message type. Both parties should initiate the connection\n * with SyncStep1. When a client received SyncStep2, it should reply with SyncDone. When the local client received both\n * SyncStep2 and SyncDone, it is assured that it is synced to the remote client.\n *\n * In a client-server model, you want to handle this differently: The client should initiate the connection with SyncStep1.\n * When the server receives SyncStep1, it should reply with SyncStep2 immediately followed by SyncStep1. The client replies\n * with SyncStep2 when it receives SyncStep1. Optionally the server may send a SyncDone after it received SyncStep2, so the\n * client knows that the sync is finished.  There are two reasons for this more elaborated sync model: 1. This protocol can\n * easily be implemented on top of http and websockets. 2. The server shoul only reply to requests, and not initiate them.\n * Therefore it is necesarry that the client initiates the sync.\n *\n * Construction of a message:\n * [messageType : varUint, message definition..]\n *\n * Note: A message does not include information about the room name. This must to be handled by the upper layer protocol!\n *\n * stringify[messageType] stringifies a message definition (messageType is already read from the bufffer)\n */\n\nexport const messageYjsSyncStep1 = 0\nexport const messageYjsSyncStep2 = 1\nexport const messageYjsUpdate = 2\n\n/**\n * Create a sync step 1 message based on the state of the current shared document.\n *\n * @param {encoding.Encoder} encoder\n * @param {Y.Doc} doc\n */\nexport const writeSyncStep1 = (encoder, doc) => {\n  encoding.writeVarUint(encoder, messageYjsSyncStep1)\n  const sv = Y.encodeStateVector(doc)\n  encoding.writeVarUint8Array(encoder, sv)\n}\n\n/**\n * @param {encoding.Encoder} encoder\n * @param {Y.Doc} doc\n * @param {Uint8Array} [encodedStateVector]\n */\nexport const writeSyncStep2 = (encoder, doc, encodedStateVector) => {\n  encoding.writeVarUint(encoder, messageYjsSyncStep2)\n  encoding.writeVarUint8Array(encoder, Y.encodeStateAsUpdate(doc, encodedStateVector))\n}\n\n/**\n * Read SyncStep1 message and reply with SyncStep2.\n *\n * @param {decoding.Decoder} decoder The reply to the received message\n * @param {encoding.Encoder} encoder The received message\n * @param {Y.Doc} doc\n */\nexport const readSyncStep1 = (decoder, encoder, doc) =>\n  writeSyncStep2(encoder, doc, decoding.readVarUint8Array(decoder))\n\n/**\n * Read and apply Structs and then DeleteStore to a y instance.\n *\n * @param {decoding.Decoder} decoder\n * @param {Y.Doc} doc\n * @param {any} transactionOrigin\n */\nexport const readSyncStep2 = (decoder, doc, transactionOrigin) => {\n  try {\n    Y.applyUpdate(doc, decoding.readVarUint8Array(decoder), transactionOrigin)\n  } catch (error) {\n    // This catches errors that are thrown by event handlers\n    console.error('Caught error while handling a Yjs update', error)\n  }\n}\n\n/**\n * @param {encoding.Encoder} encoder\n * @param {Uint8Array} update\n */\nexport const writeUpdate = (encoder, update) => {\n  encoding.writeVarUint(encoder, messageYjsUpdate)\n  encoding.writeVarUint8Array(encoder, update)\n}\n\n/**\n * Read and apply Structs and then DeleteStore to a y instance.\n *\n * @param {decoding.Decoder} decoder\n * @param {Y.Doc} doc\n * @param {any} transactionOrigin\n */\nexport const readUpdate = readSyncStep2\n\n/**\n * @param {decoding.Decoder} decoder A message received from another client\n * @param {encoding.Encoder} encoder The reply message. Will not be sent if empty.\n * @param {Y.Doc} doc\n * @param {any} transactionOrigin\n */\nexport const readSyncMessage = (decoder, encoder, doc, transactionOrigin) => {\n  const messageType = decoding.readVarUint(decoder)\n  switch (messageType) {\n    case messageYjsSyncStep1:\n      readSyncStep1(decoder, encoder, doc)\n      break\n    case messageYjsSyncStep2:\n      readSyncStep2(decoder, doc, transactionOrigin)\n      break\n    case messageYjsUpdate:\n      readUpdate(decoder, doc, transactionOrigin)\n      break\n    default:\n      throw new Error('Unknown message type')\n  }\n  return messageType\n}\n","\nimport * as Y from 'yjs' // eslint-disable-line\nimport * as encoding from 'lib0/encoding'\nimport * as decoding from 'lib0/decoding'\n\nexport const messagePermissionDenied = 0\n\n/**\n * @param {encoding.Encoder} encoder\n * @param {string} reason\n */\nexport const writePermissionDenied = (encoder, reason) => {\n  encoding.writeVarUint(encoder, messagePermissionDenied)\n  encoding.writeVarString(encoder, reason)\n}\n\n/**\n * @callback PermissionDeniedHandler\n * @param {any} y\n * @param {string} reason\n */\n\n/**\n *\n * @param {decoding.Decoder} decoder\n * @param {Y.Doc} y\n * @param {PermissionDeniedHandler} permissionDeniedHandler\n */\nexport const readAuthMessage = (decoder, y, permissionDeniedHandler) => {\n  switch (decoding.readVarUint(decoder)) {\n    case messagePermissionDenied: permissionDeniedHandler(y, decoding.readVarString(decoder))\n  }\n}\n","/**\n * Utility module to work with urls.\n *\n * @module url\n */\n\nimport * as object from './object.js'\n\n/**\n * Parse query parameters from an url.\n *\n * @param {string} url\n * @return {Object<string,string>}\n */\nexport const decodeQueryParams = url => {\n  /**\n   * @type {Object<string,string>}\n   */\n  const query = {}\n  const urlQuerySplit = url.split('?')\n  const pairs = urlQuerySplit[urlQuerySplit.length - 1].split('&')\n  for (var i = 0; i < pairs.length; i++) {\n    const item = pairs[i]\n    if (item.length > 0) {\n      const pair = item.split('=')\n      query[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1] || '')\n    }\n  }\n  return query\n}\n\n/**\n * @param {Object<string,string>} params\n * @return {string}\n */\nexport const encodeQueryParams = params =>\n  object.map(params, (val, key) => `${encodeURIComponent(key)}=${encodeURIComponent(val)}`).join('&')\n","/*\nUnlike stated in the LICENSE file, it is not necessary to include the copyright notice and permission notice when you copy code from this file.\n*/\n\n/**\n * @module provider/websocket\n */\n\n/* eslint-env browser */\n\nimport * as Y from 'yjs' // eslint-disable-line\nimport * as bc from 'lib0/broadcastchannel'\nimport * as time from 'lib0/time'\nimport * as encoding from 'lib0/encoding'\nimport * as decoding from 'lib0/decoding'\nimport * as syncProtocol from 'y-protocols/sync'\nimport * as authProtocol from 'y-protocols/auth'\nimport * as awarenessProtocol from 'y-protocols/awareness'\nimport * as mutex from 'lib0/mutex'\nimport { Observable } from 'lib0/observable'\nimport * as math from 'lib0/math'\nimport * as url from 'lib0/url'\n\nconst messageSync = 0\nconst messageQueryAwareness = 3\nconst messageAwareness = 1\nconst messageAuth = 2\n\n/**\n *                       encoder,          decoder,          provider,          emitSynced, messageType\n * @type {Array<function(encoding.Encoder, decoding.Decoder, WebsocketProvider, boolean,    number):void>}\n */\nconst messageHandlers = []\n\nmessageHandlers[messageSync] = (encoder, decoder, provider, emitSynced, messageType) => {\n  encoding.writeVarUint(encoder, messageSync)\n  const syncMessageType = syncProtocol.readSyncMessage(decoder, encoder, provider.doc, provider)\n  if (emitSynced && syncMessageType === syncProtocol.messageYjsSyncStep2 && !provider.synced) {\n    provider.synced = true\n  }\n}\n\nmessageHandlers[messageQueryAwareness] = (encoder, decoder, provider, emitSynced, messageType) => {\n  encoding.writeVarUint(encoder, messageAwareness)\n  encoding.writeVarUint8Array(encoder, awarenessProtocol.encodeAwarenessUpdate(provider.awareness, Array.from(provider.awareness.getStates().keys())))\n}\n\nmessageHandlers[messageAwareness] = (encoder, decoder, provider, emitSynced, messageType) => {\n  awarenessProtocol.applyAwarenessUpdate(provider.awareness, decoding.readVarUint8Array(decoder), provider)\n}\n\nmessageHandlers[messageAuth] = (encoder, decoder, provider, emitSynced, messageType) => {\n  authProtocol.readAuthMessage(decoder, provider.doc, permissionDeniedHandler)\n}\n\nconst reconnectTimeoutBase = 1200\nconst maxReconnectTimeout = 2500\n// @todo - this should depend on awareness.outdatedTime\nconst messageReconnectTimeout = 30000\n\n/**\n * @param {WebsocketProvider} provider\n * @param {string} reason\n */\nconst permissionDeniedHandler = (provider, reason) => console.warn(`Permission denied to access ${provider.url}.\\n${reason}`)\n\n/**\n * @param {WebsocketProvider} provider\n * @param {Uint8Array} buf\n * @param {boolean} emitSynced\n * @return {encoding.Encoder}\n */\nconst readMessage = (provider, buf, emitSynced) => {\n  const decoder = decoding.createDecoder(buf)\n  const encoder = encoding.createEncoder()\n  const messageType = decoding.readVarUint(decoder)\n  const messageHandler = provider.messageHandlers[messageType]\n  if (/** @type {any} */ (messageHandler)) {\n    messageHandler(encoder, decoder, provider, emitSynced, messageType)\n  } else {\n    console.error('Unable to compute message')\n  }\n  return encoder\n}\n\n/**\n * @param {WebsocketProvider} provider\n */\nconst setupWS = provider => {\n  if (provider.shouldConnect && provider.ws === null) {\n    const websocket = new provider._WS(provider.url)\n    websocket.binaryType = 'arraybuffer'\n    provider.ws = websocket\n    provider.wsconnecting = true\n    provider.wsconnected = false\n    provider.synced = false\n\n    websocket.onmessage = event => {\n      provider.wsLastMessageReceived = time.getUnixTime()\n      const encoder = readMessage(provider, new Uint8Array(event.data), true)\n      if (encoding.length(encoder) > 1) {\n        websocket.send(encoding.toUint8Array(encoder))\n      }\n    }\n    websocket.onclose = () => {\n      provider.ws = null\n      provider.wsconnecting = false\n      if (provider.wsconnected) {\n        provider.wsconnected = false\n        provider.synced = false\n        // update awareness (all users except local left)\n        awarenessProtocol.removeAwarenessStates(provider.awareness, Array.from(provider.awareness.getStates().keys()).filter(client => client !== provider.doc.clientID), provider)\n        provider.emit('status', [{\n          status: 'disconnected'\n        }])\n      } else {\n        provider.wsUnsuccessfulReconnects++\n      }\n      // Start with no reconnect timeout and increase timeout by\n      // log10(wsUnsuccessfulReconnects).\n      // The idea is to increase reconnect timeout slowly and have no reconnect\n      // timeout at the beginning (log(1) = 0)\n      setTimeout(setupWS, math.min(math.log10(provider.wsUnsuccessfulReconnects + 1) * reconnectTimeoutBase, maxReconnectTimeout), provider)\n    }\n    websocket.onopen = () => {\n      provider.wsLastMessageReceived = time.getUnixTime()\n      provider.wsconnecting = false\n      provider.wsconnected = true\n      provider.wsUnsuccessfulReconnects = 0\n      provider.emit('status', [{\n        status: 'connected'\n      }])\n      // always send sync step 1 when connected\n      const encoder = encoding.createEncoder()\n      encoding.writeVarUint(encoder, messageSync)\n      syncProtocol.writeSyncStep1(encoder, provider.doc)\n      websocket.send(encoding.toUint8Array(encoder))\n      // broadcast local awareness state\n      if (provider.awareness.getLocalState() !== null) {\n        const encoderAwarenessState = encoding.createEncoder()\n        encoding.writeVarUint(encoderAwarenessState, messageAwareness)\n        encoding.writeVarUint8Array(encoderAwarenessState, awarenessProtocol.encodeAwarenessUpdate(provider.awareness, [provider.doc.clientID]))\n        websocket.send(encoding.toUint8Array(encoderAwarenessState))\n      }\n    }\n\n    provider.emit('status', [{\n      status: 'connecting'\n    }])\n  }\n}\n\n/**\n * @param {WebsocketProvider} provider\n * @param {ArrayBuffer} buf\n */\nconst broadcastMessage = (provider, buf) => {\n  if (provider.wsconnected) {\n    /** @type {WebSocket} */ (provider.ws).send(buf)\n  }\n  if (provider.bcconnected) {\n    provider.mux(() => {\n      bc.publish(provider.bcChannel, buf)\n    })\n  }\n}\n\n/**\n * Websocket Provider for Yjs. Creates a websocket connection to sync the shared document.\n * The document name is attached to the provided url. I.e. the following example\n * creates a websocket connection to http://localhost:1234/my-document-name\n *\n * @example\n *   import * as Y from 'yjs'\n *   import { WebsocketProvider } from 'y-websocket'\n *   const doc = new Y.Doc()\n *   const provider = new WebsocketProvider('http://localhost:1234', 'my-document-name', doc)\n *\n * @extends {Observable<string>}\n */\nexport class WebsocketProvider extends Observable {\n  /**\n   * @param {string} serverUrl\n   * @param {string} roomname\n   * @param {Y.Doc} doc\n   * @param {object} [opts]\n   * @param {boolean} [opts.connect]\n   * @param {awarenessProtocol.Awareness} [opts.awareness]\n   * @param {Object<string,string>} [opts.params]\n   * @param {typeof WebSocket} [opts.WebSocketPolyfill] Optionall provide a WebSocket polyfill\n   * @param {number} [opts.resyncInterval] Request server state every `resyncInterval` milliseconds\n   */\n  constructor (serverUrl, roomname, doc, { connect = true, awareness = new awarenessProtocol.Awareness(doc), params = {}, WebSocketPolyfill = WebSocket, resyncInterval = -1 } = {}) {\n    super()\n    // ensure that url is always ends with /\n    while (serverUrl[serverUrl.length - 1] === '/') {\n      serverUrl = serverUrl.slice(0, serverUrl.length - 1)\n    }\n    const encodedParams = url.encodeQueryParams(params)\n    this.bcChannel = serverUrl + '/' + roomname\n    this.url = serverUrl + '/' + roomname + (encodedParams.length === 0 ? '' : '?' + encodedParams)\n    this.roomname = roomname\n    this.doc = doc\n    this._WS = WebSocketPolyfill\n    this.awareness = awareness\n    this.wsconnected = false\n    this.wsconnecting = false\n    this.bcconnected = false\n    this.wsUnsuccessfulReconnects = 0\n    this.messageHandlers = messageHandlers.slice()\n    this.mux = mutex.createMutex()\n    /**\n     * @type {boolean}\n     */\n    this._synced = false\n    /**\n     * @type {WebSocket?}\n     */\n    this.ws = null\n    this.wsLastMessageReceived = 0\n    /**\n     * Whether to connect to other peers or not\n     * @type {boolean}\n     */\n    this.shouldConnect = connect\n\n    /**\n     * @type {number}\n     */\n    this._resyncInterval = 0\n    if (resyncInterval > 0) {\n      this._resyncInterval = /** @type {any} */ (setInterval(() => {\n        if (this.ws) {\n          // resend sync step 1\n          const encoder = encoding.createEncoder()\n          encoding.writeVarUint(encoder, messageSync)\n          syncProtocol.writeSyncStep1(encoder, doc)\n          this.ws.send(encoding.toUint8Array(encoder))\n        }\n      }, resyncInterval))\n    }\n\n    /**\n     * @param {ArrayBuffer} data\n     */\n    this._bcSubscriber = data => {\n      this.mux(() => {\n        const encoder = readMessage(this, new Uint8Array(data), false)\n        if (encoding.length(encoder) > 1) {\n          bc.publish(this.bcChannel, encoding.toUint8Array(encoder))\n        }\n      })\n    }\n    /**\n     * Listens to Yjs updates and sends them to remote peers (ws and broadcastchannel)\n     * @param {Uint8Array} update\n     * @param {any} origin\n     */\n    this._updateHandler = (update, origin) => {\n      if (origin !== this) {\n        const encoder = encoding.createEncoder()\n        encoding.writeVarUint(encoder, messageSync)\n        syncProtocol.writeUpdate(encoder, update)\n        broadcastMessage(this, encoding.toUint8Array(encoder))\n      }\n    }\n    this.doc.on('update', this._updateHandler)\n    /**\n     * @param {any} changed\n     * @param {any} origin\n     */\n    this._awarenessUpdateHandler = ({ added, updated, removed }, origin) => {\n      const changedClients = added.concat(updated).concat(removed)\n      const encoder = encoding.createEncoder()\n      encoding.writeVarUint(encoder, messageAwareness)\n      encoding.writeVarUint8Array(encoder, awarenessProtocol.encodeAwarenessUpdate(awareness, changedClients))\n      broadcastMessage(this, encoding.toUint8Array(encoder))\n    }\n    this._beforeUnloadHandler = () => {\n      awarenessProtocol.removeAwarenessStates(this.awareness, [doc.clientID], 'window unload')\n    }\n    if (typeof window !== 'undefined') {\n      window.addEventListener('beforeunload', this._beforeUnloadHandler)\n    } else if (typeof process !== 'undefined') {\n      process.on('exit', () => this._beforeUnloadHandler)\n    }\n    awareness.on('update', this._awarenessUpdateHandler)\n    this._checkInterval = /** @type {any} */ (setInterval(() => {\n      if (this.wsconnected && messageReconnectTimeout < time.getUnixTime() - this.wsLastMessageReceived) {\n        // no message received in a long time - not even your own awareness\n        // updates (which are updated every 15 seconds)\n        /** @type {WebSocket} */ (this.ws).close()\n      }\n    }, messageReconnectTimeout / 10))\n    if (connect) {\n      this.connect()\n    }\n  }\n\n  /**\n   * @type {boolean}\n   */\n  get synced () {\n    return this._synced\n  }\n\n  set synced (state) {\n    if (this._synced !== state) {\n      this._synced = state\n      this.emit('synced', [state])\n      this.emit('sync', [state])\n    }\n  }\n\n  destroy () {\n    if (this._resyncInterval !== 0) {\n      clearInterval(this._resyncInterval)\n    }\n    clearInterval(this._checkInterval)\n    this.disconnect()\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('beforeunload', this._beforeUnloadHandler)\n    } else if (typeof process !== 'undefined') {\n      process.off('exit', () => this._beforeUnloadHandler)\n    }\n    this.awareness.off('update', this._awarenessUpdateHandler)\n    this.doc.off('update', this._updateHandler)\n    super.destroy()\n  }\n\n  connectBc () {\n    if (!this.bcconnected) {\n      bc.subscribe(this.bcChannel, this._bcSubscriber)\n      this.bcconnected = true\n    }\n    // send sync step1 to bc\n    this.mux(() => {\n      // write sync step 1\n      const encoderSync = encoding.createEncoder()\n      encoding.writeVarUint(encoderSync, messageSync)\n      syncProtocol.writeSyncStep1(encoderSync, this.doc)\n      bc.publish(this.bcChannel, encoding.toUint8Array(encoderSync))\n      // broadcast local state\n      const encoderState = encoding.createEncoder()\n      encoding.writeVarUint(encoderState, messageSync)\n      syncProtocol.writeSyncStep2(encoderState, this.doc)\n      bc.publish(this.bcChannel, encoding.toUint8Array(encoderState))\n      // write queryAwareness\n      const encoderAwarenessQuery = encoding.createEncoder()\n      encoding.writeVarUint(encoderAwarenessQuery, messageQueryAwareness)\n      bc.publish(this.bcChannel, encoding.toUint8Array(encoderAwarenessQuery))\n      // broadcast local awareness state\n      const encoderAwarenessState = encoding.createEncoder()\n      encoding.writeVarUint(encoderAwarenessState, messageAwareness)\n      encoding.writeVarUint8Array(encoderAwarenessState, awarenessProtocol.encodeAwarenessUpdate(this.awareness, [this.doc.clientID]))\n      bc.publish(this.bcChannel, encoding.toUint8Array(encoderAwarenessState))\n    })\n  }\n\n  disconnectBc () {\n    // broadcast message with local awareness state set to null (indicating disconnect)\n    const encoder = encoding.createEncoder()\n    encoding.writeVarUint(encoder, messageAwareness)\n    encoding.writeVarUint8Array(encoder, awarenessProtocol.encodeAwarenessUpdate(this.awareness, [this.doc.clientID], new Map()))\n    broadcastMessage(this, encoding.toUint8Array(encoder))\n    if (this.bcconnected) {\n      bc.unsubscribe(this.bcChannel, this._bcSubscriber)\n      this.bcconnected = false\n    }\n  }\n\n  disconnect () {\n    this.shouldConnect = false\n    this.disconnectBc()\n    if (this.ws !== null) {\n      this.ws.close()\n    }\n  }\n\n  connect () {\n    this.shouldConnect = true\n    if (!this.wsconnected && this.ws === null) {\n      setupWS(this)\n      this.connectBc()\n    }\n  }\n}\n"],"names":["last","arr","length","create","copy","a","slice","appendTo","dest","src","i","push","from","Array","every","f","some","equalFlat","b","item","index","flatten","reduce","acc","val","concat","callAll","fs","args","nop","apply","id","equalityStrict","equalityFlat","constructor","equalityDeep","ArrayBuffer","Uint8Array","byteLength","Set","size","value","has","Map","key","keys","get","Object","floor","Math","ceil","abs","imul","round","log10","log2","log","sqrt","add","min","max","isNaN","Number","pow","exp10","exp","sign","isNegativeZero","n","createMutex","token","g","undefined","assign","forEach","obj","map","results","hasProperty","prototype","hasOwnProperty","call","outdatedTimeout","Awareness","doc","super","this","clientID","states","meta","_checkInterval","setInterval","now","getLocalState","lastUpdated","setLocalState","remove","clientid","removeAwarenessStates","on","destroy","emit","clearInterval","state","currLocalMeta","clock","prevState","delete","set","added","updated","filteredUpdated","removed","setLocalStateField","field","getStates","awareness","clients","origin","curMeta","encodeAwarenessUpdate","len","encoder","JSON","stringify","modifyAwarenessUpdate","update","modify","decoder","decoding","createDecoder","encoding","createEncoder","readVarUint","writeVarUint","parse","readVarString","modifiedState","writeVarString","toUint8Array","applyAwarenessUpdate","timestamp","clientMeta","currClock","channels","LocalStoragePolyfill","room","onmessage","storage","e","data","buffer","newValue","postMessage","buf","BC","BroadcastChannel","getChannel","subs","bc","sub","subscribe","unsubscribe","publish","c","messageYjsSyncStep1","messageYjsSyncStep2","messageYjsUpdate","writeSyncStep1","sv","writeSyncStep2","encodedStateVector","readSyncStep1","readSyncStep2","transactionOrigin","error","console","writeUpdate","readUpdate","readSyncMessage","messageType","Error","messagePermissionDenied","writePermissionDenied","reason","readAuthMessage","y","permissionDeniedHandler","decodeQueryParams","url","query","urlQuerySplit","split","pairs","pair","decodeURIComponent","encodeQueryParams","params","object","encodeURIComponent","join","messageSync","messageQueryAwareness","messageAwareness","messageAuth","messageHandlers","provider","emitSynced","syncMessageType","synced","reconnectTimeoutBase","maxReconnectTimeout","messageReconnectTimeout","warn","readMessage","messageHandler","setupWS","shouldConnect","ws","websocket","_WS","binaryType","wsconnecting","wsconnected","event","wsLastMessageReceived","time","send","onclose","filter","client","status","wsUnsuccessfulReconnects","setTimeout","math","onopen","encoderAwarenessState","broadcastMessage","bcconnected","mux","bcChannel","WebsocketProvider","serverUrl","roomname","connect","WebSocketPolyfill","WebSocket","resyncInterval","encodedParams","mutex","_synced","_resyncInterval","_bcSubscriber","_updateHandler","_awarenessUpdateHandler","changedClients","_beforeUnloadHandler","window","addEventListener","process","close","disconnect","removeEventListener","off","connectBc","encoderSync","encoderState","encoderAwarenessQuery","disconnectBc"],"sourceRoot":""}